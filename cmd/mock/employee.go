// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/domain/employee.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/elraghifary/go-echo-hr-portal/cmd/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockEmployeeMySQLRepository is a mock of EmployeeMySQLRepository interface.
type MockEmployeeMySQLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeMySQLRepositoryMockRecorder
}

// MockEmployeeMySQLRepositoryMockRecorder is the mock recorder for MockEmployeeMySQLRepository.
type MockEmployeeMySQLRepositoryMockRecorder struct {
	mock *MockEmployeeMySQLRepository
}

// NewMockEmployeeMySQLRepository creates a new mock instance.
func NewMockEmployeeMySQLRepository(ctrl *gomock.Controller) *MockEmployeeMySQLRepository {
	mock := &MockEmployeeMySQLRepository{ctrl: ctrl}
	mock.recorder = &MockEmployeeMySQLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeMySQLRepository) EXPECT() *MockEmployeeMySQLRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEmployeeMySQLRepository) Get(ctx context.Context) ([]domain.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].([]domain.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEmployeeMySQLRepositoryMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEmployeeMySQLRepository)(nil).Get), ctx)
}

// MockEmployeeUsecase is a mock of EmployeeUsecase interface.
type MockEmployeeUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeUsecaseMockRecorder
}

// MockEmployeeUsecaseMockRecorder is the mock recorder for MockEmployeeUsecase.
type MockEmployeeUsecaseMockRecorder struct {
	mock *MockEmployeeUsecase
}

// NewMockEmployeeUsecase creates a new mock instance.
func NewMockEmployeeUsecase(ctrl *gomock.Controller) *MockEmployeeUsecase {
	mock := &MockEmployeeUsecase{ctrl: ctrl}
	mock.recorder = &MockEmployeeUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeUsecase) EXPECT() *MockEmployeeUsecaseMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEmployeeUsecase) Get(ctx context.Context) ([]domain.EmployeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].([]domain.EmployeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEmployeeUsecaseMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEmployeeUsecase)(nil).Get), ctx)
}
